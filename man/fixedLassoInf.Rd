% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SelectiveInference_funs.fixed_eta.R
\name{fixedLassoInf}
\alias{fixedLassoInf}
\title{Inference for the lasso, with a fixed lambda (selectiveInference package)}
\usage{
fixedLassoInf(x, y, beta, lambda, family = c("gaussian", "binomial", "cox"),
  intercept = TRUE, status = NULL, sigma = NULL, alpha = 0.1,
  type = c("partial", "full"), tol.beta = 1e-05, tol.kkt = 0.1,
  gridrange = c(-100, 100), bits = NULL, verbose = FALSE)
}
\arguments{
\item{x}{Matrix of predictors (n by p);}

\item{y}{Vector of outcomes (length n)}

\item{beta}{Estimated lasso coefficients (e.g., from glmnet). This is of length p (so the intercept is not included as the first component). Be careful! This function uses the "standard" lasso objective
1/2 \|y - x β\|_2^2 + λ \|β\|_1.
In contrast, glmnet multiplies the first term by a factor of 1/n. So after running glmnet, to extract the beta corresponding to a value lambda, you need to use beta = coef(obj, s=lambda/n)[-1], where obj is the object returned by glmnet (and [-1] removes the intercept, which glmnet always puts in the first component)}

\item{lambda}{Value of lambda used to compute beta. See the above warning}

\item{family}{Response type: "gaussian" (default), "binomial", or "cox" (for censored survival data)}

\item{intercept}{Was the lasso problem solved (e.g., by glmnet) with an intercept in the model? Default is TRUE. Must be TRUE for "binomial" family. Not used for 'cox" family, where no intercept is assumed.}

\item{status}{Censoring status for Cox model; 1=failurem 0=censored}

\item{sigma}{Estimate of error standard deviation. If NULL (default), this is estimated using the mean squared residual of the full least squares fit when n >= 2p, and using the standard deviation of y when n < 2p. In the latter case, the user should use estimateSigma function for a more accurate estimate. Not used for family= "binomial", or "cox"}

\item{alpha}{Significance level for confidence intervals (target is miscoverage alpha/2 in each tail)}

\item{type}{Contrast type for p-values and confidence intervals: default is "partial"—meaning that the contrasts tested are the partial population regression coefficients, within the active set of predictors; the alternative is "full"—meaning that the full population regression coefficients are tested. The latter does not make sense when p > n.}

\item{tol.beta}{Tolerance for determining if a coefficient is zero}

\item{tol.kkt}{Tolerance for determining if an entry of the subgradient is zero}

\item{gridrange}{Grid range for constructing confidence intervals, on the standardized scale}

\item{bits}{Number of bits to be used for p-value and confidence interval calculations. Default is NULL, in which case standard floating point calculations are performed. When not NULL, multiple precision floating point calculations are performed with the specified number of bits, using the R package Rmpfr (if this package is not installed, then a warning is thrown, and standard floating point calculations are pursued). Note: standard double precision uses 53 bits so, e.g., a choice of 200 bits uses about 4 times double precision. The confidence interval computation is sometimes numerically challenging, and the extra precision can be helpful (though computationally more costly). In particular, extra precision might be tried if the values in the output columns of tailarea differ noticeably from alpha/2.}

\item{verbose}{Print out progress along the way? Default is FALSE}

\item{contrast}{A matrix with colnames as the Estimated lasso coefficients names to test and perform CIs}
}
\description{
Compute p-values and confidence intervals for a contrast of the lasso estimate,
at a fixed value of the tuning parameter lambda. This function was adapted
from the package selectiveInferece to perform the calculations on a contrast
of the estimates instead of a single coefficient
}
\examples{
input <- MakeInput()
parameters <- MakeParameters(input = input)
dataset <-OneData(input,parameters)

}

