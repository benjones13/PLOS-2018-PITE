
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###############################################################################-
> # pdf(NULL)
> 
> # Erase everything in environment for reproducible results and set seed
> cat("\014")
> print(pryr::mem_used())
23.3 MB
> rm(list = ls())
> print(pryr::mem_used())
23.5 MB
> ###############################################################################-
> # Load required packages -------------------------------------------------------
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> library(MASS)

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select

> library(Matrix)
> library(matrixcalc)
> library(matrixStats)

Attaching package: ‘matrixStats’

The following object is masked from ‘package:dplyr’:

    count

> library(monomvn)
Loading required package: pls

Attaching package: ‘pls’

The following object is masked from ‘package:stats’:

    loadings

Loading required package: lars
Loaded lars 1.2

> library(mvtnorm)
> library(scales)
> library(ggpubr)
Loading required package: magrittr
> library(PITE)
Loading required package: broom
Loading required package: glmnet
Loading required package: foreach
Loaded glmnet 2.0-13

Loading required package: knitr
Loading required package: selectiveInference
Loading required package: intervals

Attaching package: ‘intervals’

The following object is masked from ‘package:Matrix’:

    expand

Loading required package: survival
Loading required package: R.utils
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.7.1 (2016-02-15) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.22.0 (2018-04-21) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:magrittr’:

    equals

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, gc, load, save

R.utils v2.5.0 (2016-11-07) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:magrittr’:

    extract

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, inherits, isOpen, parse, warnings


Attaching package: ‘PITE’

The following object is masked from ‘package:selectiveInference’:

    fixedLassoInf

> 
> 
> set.seed(123444)
> ###############################################################################-
> # We use the dataset from Schnell (2016) https://onlinelibrary.wiley.com/doi/abs/10.1111/biom.12522
> # to illustrate the methods proposed in this work.
> # The data comes from a clinical trial of an Alzheimer's disease treatment
> # developed by AbbVie.
> # Data is loaded from the article's supplementary material
> # Load Dataset and data transformation -----------------------------------------
> data_url = "https://onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1111%2Fbiom.12522&attachmentId=164892786"
> temp <- tempfile()
> download.file(data_url,temp)
trying URL 'https://onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1111%2Fbiom.12522&attachmentId=164892786'
Content type 'application/zip; charset=UTF-8' length 13170 bytes (12 KB)
==================================================
downloaded 12 KB

> data <- read.csv(unz(temp, "alzheimers.csv"))
> # Recategorize predictors to the 'PARAM' parametrization
> # And rename them to use in our function
> data$TREATMENT <- relevel(data$TREATMENT, ref="placebo")
> data$CARRIER   <- relevel(data$CARRIER,   ref="NON-CARRIER")
> data$treatment <- 2*(data$TREATMENT=="low")-1
> data$mkr1      <- scale(data$SEVERITY)
> data$mkr2      <- scale(data$AGE)
> # data$mkr3      <- 2*(data$SEX=="M")-1
> # data$mkr4      <- 2*(data$CARRIER=="CARRIER")-1
> data$mkr3      <- scale(data$SEX=="M")
> data$mkr4      <- scale(data$CARRIER=="CARRIER")
> 
> data$y         <- data$CHANGE
> # Create ID Variable
> data$TrueTrtEff <- 0
> data$ID <- 1:41
> 
> # Table for reference of new names
> vars <- data.frame(var.new = c("treatment", paste0("mkr",1:4)),
+                    var.old = c("treatment", "severity",
+                                "age", "sex", "carrier"))
> vars
    var.new   var.old
1 treatment treatment
2      mkr1  severity
3      mkr2       age
4      mkr3       sex
5      mkr4   carrier
> 
> # Create input list with n_biom, this is needed for our function
> input <- list(n_biom=4)
> n_biom <- input$n_biom  # n_biom
> n_biom_extra<-6
> N <- sample.size <- nrow(data)     # Total number of subjects
> K <- n_biom*2+2     # Number of coefficients in the model
> # Add 6 more biomarkers to the dataset
> mkrCols <- data.frame(mvrnorm(N,rep(0,n_biom_extra),diag(1,n_biom_extra)))
> names(mkrCols) <- paste0("mkr",(4+1):(4+n_biom_extra))
> input$n_biom <- n_biom <- 4 + n_biom_extra
> prog <- paste0(" mkr",1:n_biom, collapse = " +")
> pred <- paste0(" treatment*mkr",1:n_biom, collapse = " +")
> formula <- as.formula(paste0("y ~ treatment + ", paste(prog, pred, sep = " +")))
> dataset <- dataset.copy <- data
> dataset <- cbind(data,mkrCols)
> 
> levels = c("treatment", paste0("treatment:mkr",1:n_biom))
> levels.orig <- c("treatment", "treatment:severity",
+                  "treatment:age", "treatment:sex",
+                  "treatment:carrier", paste0("treatment:mkr",5:n_biom))
> 
> ## Vectorized gsub function to change names of variables back to original
> gsub2 <- function(pattern, replacement, x, ...) {
+   for(i in 1:length(pattern))
+     x <- gsub(pattern[i], replacement[i], x, ...)
+   x
+ }
> 
> ###############################################################################-
> ## Analysis using Scores -------------------------------------------------------
> 
> ## **Obtain score for ML -------------------------------------------------------
> ML.results <- score.lm(dataset, input, verbose = F, alpha = 0.05)
> #  Print results for ML
> knitr::kable(ML.results$ML.output,
+              digits=2, row.names = F,
+              caption = 'Model Parameters estimates from Maximum Likelihood')


|term            | estimate| std.error| statistic| p.value| LowConfPt| UpConfPt|
|:---------------|--------:|---------:|---------:|-------:|---------:|--------:|
|(Intercept)     |     0.31|      0.85|      0.36|    0.72|     -1.47|     2.08|
|treatment       |     2.05|      0.85|      2.42|    0.03|      0.27|     3.82|
|mkr1            |    -0.50|      0.95|     -0.52|    0.61|     -2.49|     1.49|
|mkr2            |     0.22|      0.99|      0.23|    0.82|     -1.85|     2.30|
|mkr3            |    -0.74|      1.15|     -0.65|    0.53|     -3.14|     1.66|
|mkr4            |     0.03|      1.11|      0.02|    0.98|     -2.31|     2.36|
|mkr5            |     0.38|      0.89|      0.42|    0.68|     -1.48|     2.23|
|mkr6            |    -0.24|      1.03|     -0.24|    0.82|     -2.40|     1.91|
|mkr7            |     0.61|      0.96|      0.64|    0.53|     -1.40|     2.62|
|mkr8            |     2.19|      1.25|      1.74|    0.10|     -0.44|     4.81|
|mkr9            |     0.82|      1.34|      0.61|    0.55|     -2.00|     3.63|
|mkr10           |     1.05|      0.97|      1.08|    0.29|     -0.98|     3.08|
|treatment:mkr1  |    -0.27|      0.95|     -0.28|    0.78|     -2.26|     1.73|
|treatment:mkr2  |     0.97|      0.99|      0.97|    0.34|     -1.11|     3.04|
|treatment:mkr3  |    -2.39|      1.15|     -2.08|    0.05|     -4.79|     0.01|
|treatment:mkr4  |     0.11|      1.11|      0.10|    0.92|     -2.22|     2.45|
|treatment:mkr5  |     0.14|      0.89|      0.15|    0.88|     -1.72|     1.99|
|treatment:mkr6  |     0.56|      1.03|      0.55|    0.59|     -1.59|     2.72|
|treatment:mkr7  |     1.60|      0.96|      1.67|    0.11|     -0.41|     3.62|
|treatment:mkr8  |    -0.80|      1.25|     -0.63|    0.53|     -3.42|     1.83|
|treatment:mkr9  |     0.80|      1.34|      0.59|    0.56|     -2.02|     3.61|
|treatment:mkr10 |     0.46|      0.97|      0.47|    0.64|     -1.57|     2.49|
> 
> ## **Obtain score for Lasso ----------------------------------------------------
> set.seed(47436)
> lasso.results <- score.lasso(dataset, input, parameters=NULL,
+                              alpha = 0.05, verbose = T,
+                              lambda = "lagrange",
+                              lam_frac = .5)

 lambda: 0.1654026 , nvar: 7  -  0 0.25 0 0 0 0 0 0 0 0.05 0 0 0 0.06 -0.16 0 0 0.04 0.07 -0.17 0 0  - 
Lasso: Done - Warning messages:
1: In fixedLassoInf_eta(x, y, beta = coef.noint, lambda = bestlam *  :
  p > n/2, and sd(y) = 1.000 used as an estimate of sigma; you may want to use the estimateSigma function
2: In selectiveInference::fixedLassoInf(x, y, beta = coef.noint, lambda = bestlam *  :
  p > n/2, and sd(y) = 1.000 used as an estimate of sigma; you may want to use the estimateSigma function
> knitr::kable(lasso.results$Lasso.output,
+              digits=2, row.names = F,
+              caption = 'Model Parameters estimates from Lasso')


|term            | estimate| statistic| p.value| LowConfPt| UpConfPt|
|:---------------|--------:|---------:|-------:|---------:|--------:|
|treatment       |     1.26|      2.53|    0.03|     -0.17|     3.59|
|mkr1            |     0.00|        NA|      NA|        NA|       NA|
|mkr2            |     0.00|        NA|      NA|        NA|       NA|
|mkr3            |     0.00|        NA|      NA|        NA|       NA|
|mkr4            |     0.00|        NA|      NA|        NA|       NA|
|mkr5            |     0.00|        NA|      NA|        NA|       NA|
|mkr6            |     0.00|        NA|      NA|        NA|       NA|
|mkr7            |     0.00|        NA|      NA|        NA|       NA|
|mkr8            |     0.28|      1.65|    0.54|     -9.01|     2.97|
|mkr9            |     0.00|        NA|      NA|        NA|       NA|
|mkr10           |     0.00|        NA|      NA|        NA|       NA|
|treatment:mkr1  |     0.00|        NA|      NA|        NA|       NA|
|treatment:mkr2  |     0.30|      1.16|    0.59|     -8.16|     2.48|
|treatment:mkr3  |    -0.83|     -2.13|    0.14|     -3.90|     1.67|
|treatment:mkr4  |     0.00|        NA|      NA|        NA|       NA|
|treatment:mkr5  |     0.00|        NA|      NA|        NA|       NA|
|treatment:mkr6  |     0.19|      1.14|    0.69|    -11.12|     2.08|
|treatment:mkr7  |     0.28|      1.61|    0.46|     -4.47|     2.25|
|treatment:mkr8  |    -0.90|     -1.57|    0.20|     -3.94|     2.14|
|treatment:mkr9  |     0.00|        NA|      NA|        NA|       NA|
|treatment:mkr10 |     0.00|        NA|      NA|        NA|       NA|
> lambda.min <- score.lasso(dataset = dataset, input = input, alpha = 0.05, verbose = T,
+                           lambda = "lambda.min")$bestlam

 lambda: 0.08658939 , nvar: 8  -  0 0.32 0 0 0 0 0 0 0 0.16 0 0 0 0.12 -0.25 0 0 0.11 0.17 -0.21 0.01 0  - 
Lasso: Done - Warning messages:
1: In fixedLassoInf_eta(x, y, beta = coef.noint, lambda = bestlam *  :
  p > n/2, and sd(y) = 1.000 used as an estimate of sigma; you may want to use the estimateSigma function
2: In selectiveInference::fixedLassoInf(x, y, beta = coef.noint, lambda = bestlam *  :
  p > n/2, and sd(y) = 1.000 used as an estimate of sigma; you may want to use the estimateSigma function
> lambda.1se <- score.lasso(dataset = dataset, input = input, alpha = 0.05, verbose = T,
+                           lambda = "lambda.1se")$bestlam

 lambda: 0.1660707 , nvar: 7  -  0 0.25 0 0 0 0 0 0 0 0.05 0 0 0 0.06 -0.16 0 0 0.04 0.07 -0.17 0 0  - 
Lasso: Done - Warning messages:
1: In fixedLassoInf_eta(x, y, beta = coef.noint, lambda = bestlam *  :
  p > n/2, and sd(y) = 1.000 used as an estimate of sigma; you may want to use the estimateSigma function
2: In selectiveInference::fixedLassoInf(x, y, beta = coef.noint, lambda = bestlam *  :
  p > n/2, and sd(y) = 1.000 used as an estimate of sigma; you may want to use the estimateSigma function
> lambda.1se
[1] 0.1660707
> lasso.results$bestlam
[1] 0.1654026
> lam <- lasso.results$bestlam*sample.size
> #  Print results for Lasso
> knitr::kable(lasso.results$Lasso.output,
+              digits=2, row.names = F,
+              caption = 'Model Parameters estimates from Lasso')


|term            | estimate| statistic| p.value| LowConfPt| UpConfPt|
|:---------------|--------:|---------:|-------:|---------:|--------:|
|treatment       |     1.26|      2.53|    0.03|     -0.17|     3.59|
|mkr1            |     0.00|        NA|      NA|        NA|       NA|
|mkr2            |     0.00|        NA|      NA|        NA|       NA|
|mkr3            |     0.00|        NA|      NA|        NA|       NA|
|mkr4            |     0.00|        NA|      NA|        NA|       NA|
|mkr5            |     0.00|        NA|      NA|        NA|       NA|
|mkr6            |     0.00|        NA|      NA|        NA|       NA|
|mkr7            |     0.00|        NA|      NA|        NA|       NA|
|mkr8            |     0.28|      1.65|    0.54|     -9.01|     2.97|
|mkr9            |     0.00|        NA|      NA|        NA|       NA|
|mkr10           |     0.00|        NA|      NA|        NA|       NA|
|treatment:mkr1  |     0.00|        NA|      NA|        NA|       NA|
|treatment:mkr2  |     0.30|      1.16|    0.59|     -8.16|     2.48|
|treatment:mkr3  |    -0.83|     -2.13|    0.14|     -3.90|     1.67|
|treatment:mkr4  |     0.00|        NA|      NA|        NA|       NA|
|treatment:mkr5  |     0.00|        NA|      NA|        NA|       NA|
|treatment:mkr6  |     0.19|      1.14|    0.69|    -11.12|     2.08|
|treatment:mkr7  |     0.28|      1.61|    0.46|     -4.47|     2.25|
|treatment:mkr8  |    -0.90|     -1.57|    0.20|     -3.94|     2.14|
|treatment:mkr9  |     0.00|        NA|      NA|        NA|       NA|
|treatment:mkr10 |     0.00|        NA|      NA|        NA|       NA|
> ## **Obtain score for Additive Noise Lasso  0.2 ------------------
> set.seed(47436)
> lasso.an.results1 <- score.lasso.added.noise(dataset, input,
+                                              lambda = lam,
+                                              alpha = 0.05, verbose = T,
+                                              perturb_frac = 0.2,
+                                              pite.ci = T)

 lambda: 6.78151 , nvar: 4  -  0.37 0 0 0 0 0 0 0 0 0 0 0 0.1 -0.08 0 0 0 0 -0.1 0 0  - 
Lasso: Done - > #  Print results for Additive Noise Lasso
> knitr::kable(lasso.an.results1$Lasso.output,
+              digits=2, row.names = F,
+              caption = 'Model Parameters estimates from Additive Noise Lasso')


|term            | estimate|statistic | p.value| LowConfPt| UpConfPt|
|:---------------|--------:|:---------|-------:|---------:|--------:|
|treatment       |     1.82|NA        |    0.05|      0.01|     3.67|
|mkr1            |     0.00|NA        |      NA|        NA|       NA|
|mkr2            |     0.00|NA        |      NA|        NA|       NA|
|mkr3            |     0.00|NA        |      NA|        NA|       NA|
|mkr4            |     0.00|NA        |      NA|        NA|       NA|
|mkr5            |     0.00|NA        |      NA|        NA|       NA|
|mkr6            |     0.00|NA        |      NA|        NA|       NA|
|mkr7            |     0.00|NA        |      NA|        NA|       NA|
|mkr8            |     0.00|NA        |      NA|        NA|       NA|
|mkr9            |     0.00|NA        |      NA|        NA|       NA|
|mkr10           |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr1  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr2  |     0.54|NA        |    0.95|     -3.13|     2.57|
|treatment:mkr3  |    -0.43|NA        |    0.28|     -3.33|     1.23|
|treatment:mkr4  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr5  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr6  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr7  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr8  |    -0.55|NA        |    0.13|     -3.70|     0.64|
|treatment:mkr9  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr10 |     0.00|NA        |      NA|        NA|       NA|
> 
> ## **Obtain score for Additive Noise Lasso 0.5 -----------------
> set.seed(47436)
> lasso.an.results2 <- score.lasso.added.noise(dataset, input,
+                                              lambda = lam,
+                                              alpha = 0.05, verbose = T,
+                                              perturb_frac = 0.5,
+                                              pite.ci = T)

 lambda: 6.78151 , nvar: 5  -  0.36 0 0 0 0.04 0 0 0 0 0 0 0 0.08 -0.02 0 0 0 0 -0.03 0 0  - 
Lasso: Done - > #  Print results for Additive Noise Lasso
> knitr::kable(lasso.an.results2$Lasso.output,
+              digits=2, row.names = F,
+              caption = 'Model Parameters estimates from Additive Noise Lasso')


|term            | estimate|statistic | p.value| LowConfPt| UpConfPt|
|:---------------|--------:|:---------|-------:|---------:|--------:|
|treatment       |     1.77|NA        |    0.03|      0.19|     3.77|
|mkr1            |     0.00|NA        |      NA|        NA|       NA|
|mkr2            |     0.00|NA        |      NA|        NA|       NA|
|mkr3            |     0.00|NA        |      NA|        NA|       NA|
|mkr4            |     0.20|NA        |    0.03|     -6.43|    -0.23|
|mkr5            |     0.00|NA        |      NA|        NA|       NA|
|mkr6            |     0.00|NA        |      NA|        NA|       NA|
|mkr7            |     0.00|NA        |      NA|        NA|       NA|
|mkr8            |     0.00|NA        |      NA|        NA|       NA|
|mkr9            |     0.00|NA        |      NA|        NA|       NA|
|mkr10           |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr1  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr2  |     0.40|NA        |    0.20|     -1.03|     4.54|
|treatment:mkr3  |    -0.12|NA        |    0.14|     -3.46|     0.62|
|treatment:mkr4  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr5  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr6  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr7  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr8  |    -0.17|NA        |    0.09|     -3.79|     0.31|
|treatment:mkr9  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr10 |     0.00|NA        |      NA|        NA|       NA|
> ## **Obtain score for Additive Noise Lasso  0.8 ----------------
> set.seed(47436)
> lasso.an.results3 <- score.lasso.added.noise(dataset, input,
+                                              lambda = lam,
+                                              alpha = 0.05, verbose = T,
+                                              perturb_frac = 0.8,
+                                              pite.ci = T)

 lambda: 6.78151 , nvar: 3  -  0.33 0 0 0 0.08 0 0 0 0 0 0 0 0.05 0 0 0 0 0 0 0 0  - 
Lasso: Done - > #  Print results for Additive Noise Lasso
> knitr::kable(lasso.an.results3$Lasso.output,
+              digits=2, row.names = F,
+              caption = 'Model Parameters estimates from Additive Noise Lasso')


|term            | estimate|statistic | p.value| LowConfPt| UpConfPt|
|:---------------|--------:|:---------|-------:|---------:|--------:|
|treatment       |     1.67|NA        |    0.02|      0.43|     3.90|
|mkr1            |     0.00|NA        |      NA|        NA|       NA|
|mkr2            |     0.00|NA        |      NA|        NA|       NA|
|mkr3            |     0.00|NA        |      NA|        NA|       NA|
|mkr4            |     0.37|NA        |    0.12|     -4.52|     0.50|
|mkr5            |     0.00|NA        |      NA|        NA|       NA|
|mkr6            |     0.00|NA        |      NA|        NA|       NA|
|mkr7            |     0.00|NA        |      NA|        NA|       NA|
|mkr8            |     0.00|NA        |      NA|        NA|       NA|
|mkr9            |     0.00|NA        |      NA|        NA|       NA|
|mkr10           |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr1  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr2  |     0.24|NA        |    0.13|     -0.56|     4.39|
|treatment:mkr3  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr4  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr5  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr6  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr7  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr8  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr9  |     0.00|NA        |      NA|        NA|       NA|
|treatment:mkr10 |     0.00|NA        |      NA|        NA|       NA|
> 
> ##### Plot coefficients --------------------------------------------------------
> myPal <- c("#90ca3d","#82b6cc","#0f5e7f","#024460","#f07318")
> cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
+                "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
> Cols <- c("term", "estimate", "LowConfPt", "UpConfPt")
> myPal <- c("black","#EE4035", "#F3A530", "#56B949", "#82b6cc","#0f5e7f","#024460")
> methods
function (generic.function, class) 
{
    if (!missing(generic.function) && !is.character(generic.function)) 
        generic.function <- deparse(substitute(generic.function))
    if (!missing(class) && !is.character(class)) 
        class <- paste(deparse(substitute(class)))
    s3 <- .S3methods(generic.function, class, parent.frame())
    s4 <- if (.isMethodsDispatchOn()) {
        methods::.S4methods(generic.function, class)
    }
    else NULL
    .MethodsFunction(s3, s4, missing(generic.function))
}
<bytecode: 0x6d06798>
<environment: namespace:utils>
> names(myPal) <- c("ATE", "full", "Lasso","reduced", "reduced-Scheffe", "rLasso", "rLasso-2")
> myShape <- c(NA,16,17,15,3,12,13)
> names(myShape) <- c("ATE", "full", "Lasso","reduced", "reduced-Scheffe", "rLasso", "rLasso-2")
> 
> rbind(cbind(lasso.results$Lasso.output,method="Lasso"),
+       cbind(lasso.results$ML.output.M[-1,c(1,2,4,5,6,7)],method="reduced"),
+       cbind(lasso.an.results1$Lasso.output,method="rLasso"),
+       cbind(ML.results$ML.output[-1,c(1,2,4,5,6,7)], method="full")) -> results.coef
> results.coef %>%
+   mutate(method = factor(method, levels=c("full", "Lasso", "reduced", "reduced-Scheffe", "rLasso"))) -> results.coef
> 
> results.coef %>%
+   filter(grepl("treatment",x = term)) %>%
+   mutate(estimate = ifelse(estimate != 0, estimate, NA)) %>%
+   mutate(term = gsub2(levels, levels.orig, term)) %>%
+   mutate(term = gsub("severity0", "mkr10", term)) %>%
+   mutate(term = factor(term, levels= levels.orig)) %>%
+   ggplot(aes(ymin=LowConfPt, ymax=UpConfPt, y=estimate, x=term, color=method, group = method)) +
+   geom_hline(yintercept = 0, color="gray") +
+   geom_errorbar(width = 0.5, size = 0.15, position = position_dodge(width=0.5)) +
+   geom_point(aes(shape=method), size = 1, position = position_dodge(width=0.5)) +
+   scale_color_manual(name = "Method", values = myPal, drop=FALSE) +
+   scale_shape_manual(name = "Method", values = myShape, drop=FALSE) +
+   theme_bw() +
+   theme(strip.background = element_blank(),
+         panel.grid = element_blank(),
+         strip.text   = element_text(size = 7),
+         strip.text.y = element_text(size = 7),
+         strip.text.x = element_text(size = 9),
+         legend.text  = element_text(size = 8),
+         legend.title = element_text(size = 8),
+         legend.title.align = 0.5,
+         axis.title.y = element_text(size = 7),
+         axis.title.x = element_text(size = 7),
+         axis.text.x    = element_text(size = 7, #color = "black",
+                                     angle = 45, hjust = 1,
+                                     color = c(rep("black",5),rep("gray40", 6))),
+         # axis.text.x  = element_text(size = 7, color = "black"),
+         # axis.text.x  = element_blank(),
+         # axis.ticks.x  = element_blank(),
+         strip.placement = "outside") +
+   labs(x="Term",y="Estimate") -> plot.coefficients
> 
> 
> ##### Plot PITE --------------------------------------------------------
> Cols <- c("ID", "estimate", "LowConfPt", "UpConfPt", "method")
> 
> d0<-(data.frame(ML.results$scores[c("Dx", "Dx.ll", "Dx.ul")],        method="full"))
> d1<-(data.frame(lasso.results$scores[c("Dx", "Dx.ll", "Dx.ul")],     method="Lasso"))
> d3<-(data.frame(lasso.an.results1$scores[c("Dx", "Dx.ll", "Dx.ul")], method="rLasso"))
> d5<-(data.frame(lasso.results$scoresML[c("Dx", "Dx.ll", "Dx.ul")],   method="reduced"))
> d6<-(data.frame(lasso.results$scoresSch[c("Dx", "Dx.ll", "Dx.ul")],  method="reduced-Scheffe"))
> nrow(d1)
[1] 41
> 
> rbind(d0,d1,#d2,
+       d3,#d4,
+       d5,d6) -> results.all
> results.all %>%
+   mutate(method = factor(method, levels=c("full", "Lasso", "reduced", "reduced-Scheffe", "rLasso"))) -> results.all
> 
> data.frame(results.all, ID= rep(1:41, nrow(results.all)/41)) -> results.all
> 
> results.all %>%
+   filter(ID<11) %>%
+   ggplot(aes(ymin=Dx.ll, ymax=Dx.ul, x=ID, y=Dx, color=method, group = method)) +
+   geom_hline(yintercept = 0, color="gray") +
+   geom_point(aes(shape=method), size = 0.5, position = position_dodge(width=0.5)) +
+   geom_errorbar(width = 0.5, position = position_dodge(width=0.5)) +
+   scale_color_manual(name = "Method", values = myPal) +
+   scale_shape_manual(name = "Method", values = myShape) +
+   theme_bw() +
+   labs(x="Subject Id",y="Estimate") +
+   scale_x_continuous(breaks=1:10) +
+   theme_classic() +
+   theme(legend.position = "right",
+         text = element_text(size=12),
+         axis.text.x = element_text(size = 12, colour = "black"),
+         axis.text.y = element_text(size = 12, colour = "black"),
+         panel.grid.major.x = element_blank(),
+         panel.grid.minor = element_blank())  -> plot.subjects
> 
> # plot.subjects
> 
> # ## *Print plot in PDF ----
> # ggsave(filename = "paper/FigureE1-subjects.pdf",
> #        plot = plot.subjects,
> #        width=7, height=4)
> 
> 
> # Selected patients (grid) -------
> head(dataset)
   CHANGE TREATMENT  SEVERITY AGE SEX     CARRIER treatment        mkr1
1  0.3333       low  8.666667  75   F     CARRIER         1 -1.64591892
2  0.0000   placebo 19.000000  72   M     CARRIER        -1 -0.40513425
3  3.6667   placebo 21.666667  84   F     CARRIER        -1 -0.08493176
4 -8.6667   placebo 38.333333  85   F NON-CARRIER        -1  1.91633383
5  8.0000       low 32.333333  86   M NON-CARRIER         1  1.19587822
6  6.6667       low 13.000000  88   F     CARRIER         1 -1.12558987
        mkr2       mkr3       mkr4       y TrueTrtEff ID       mkr5       mkr6
1 -0.1255358 -0.7502345  0.8737967  0.3333          0  1 -0.2099159  0.3166674
2 -0.4686670  1.3004064  0.8737967  0.0000          0  2  1.5884260  1.3346911
3  0.9038578 -0.7502345  0.8737967  3.6667          0  3  0.5878485  0.6129527
4  1.0182349 -0.7502345 -1.1165180 -8.6667          0  4 -1.1052778  1.7741815
5  1.1326120  1.3004064 -1.1165180  8.0000          0  5  1.5488619 -0.3324331
6  1.3613661 -0.7502345  0.8737967  6.6667          0  6  0.2623294 -0.1324529
         mkr7        mkr8        mkr9      mkr10
1 -0.71455353 -0.57527792 -0.04027677  0.3622454
2 -0.07634177 -0.10252343 -1.25697149  0.3832399
3 -1.17002845  1.29569089 -0.56992019 -0.4153073
4  1.17369496  0.09425293 -0.31222544  0.3660513
5  2.60902070 -0.25292334  1.48797569 -0.3295633
6 -1.84340362 -0.54876388 -0.55344517  1.2254570
> dataset.test <- data.frame(carrier = "NON-CARRIER",
+                            severity = mean(data$SEVERITY),
+                            age = c(70,85,70,85),
+                            sex = c("F","F","M","M"),
+                            mkr5 = 0,
+                            mkr6 = 0,
+                            mkr7 = 0,
+                            mkr8 = 0,
+                            mkr9 = 0,
+                            mkr10 = 0,
+                            TrueTrtEff = 0)
> table(data$AGE)

58 59 60 64 67 69 70 72 73 74 75 77 78 79 80 81 82 83 84 85 86 87 88 90 
 1  2  1  2  1  3  1  1  3  2  2  2  1  1  2  2  1  3  3  2  2  1  1  1 
> table(data$SEX)

 F  M 
26 15 
> mean(data$SEVERITY)
[1] 22.37398
> # Recategorize predictors to the 'PARAM' parametrization
> # And rename them to use in our function
> dataset.test$carrier   <- relevel(dataset.test$carrier,   ref="NON-CARRIER")
> dataset.test$mkr1      <- scale(dataset.test$severity, center = attr(data$mkr1, "scaled:center"), scale = attr(data$mkr1, "scaled:scale"))
> dataset.test$mkr2      <- scale(dataset.test$age, center = attr(data$mkr2, "scaled:center"), scale = attr(data$mkr2, "scaled:scale"))
> dataset.test$mkr3      <- scale(dataset.test$sex=="M", center = attr(data$mkr3, "scaled:center"), scale = attr(data$mkr3, "scaled:scale"))
> dataset.test$mkr4      <- scale(dataset.test$carrier=="CARRIER", center = attr(data$mkr4, "scaled:center"), scale = attr(data$mkr4, "scaled:scale"))
> # dataset.test$mkr3      <- 2*(dataset.test$sex=="M")-1
> # dataset.test$mkr4      <- 2*(dataset.test$carrier=="CARRIER")-1
> 
> # dataset.test
> head(dataset)
   CHANGE TREATMENT  SEVERITY AGE SEX     CARRIER treatment        mkr1
1  0.3333       low  8.666667  75   F     CARRIER         1 -1.64591892
2  0.0000   placebo 19.000000  72   M     CARRIER        -1 -0.40513425
3  3.6667   placebo 21.666667  84   F     CARRIER        -1 -0.08493176
4 -8.6667   placebo 38.333333  85   F NON-CARRIER        -1  1.91633383
5  8.0000       low 32.333333  86   M NON-CARRIER         1  1.19587822
6  6.6667       low 13.000000  88   F     CARRIER         1 -1.12558987
        mkr2       mkr3       mkr4       y TrueTrtEff ID       mkr5       mkr6
1 -0.1255358 -0.7502345  0.8737967  0.3333          0  1 -0.2099159  0.3166674
2 -0.4686670  1.3004064  0.8737967  0.0000          0  2  1.5884260  1.3346911
3  0.9038578 -0.7502345  0.8737967  3.6667          0  3  0.5878485  0.6129527
4  1.0182349 -0.7502345 -1.1165180 -8.6667          0  4 -1.1052778  1.7741815
5  1.1326120  1.3004064 -1.1165180  8.0000          0  5  1.5488619 -0.3324331
6  1.3613661 -0.7502345  0.8737967  6.6667          0  6  0.2623294 -0.1324529
         mkr7        mkr8        mkr9      mkr10
1 -0.71455353 -0.57527792 -0.04027677  0.3622454
2 -0.07634177 -0.10252343 -1.25697149  0.3832399
3 -1.17002845  1.29569089 -0.56992019 -0.4153073
4  1.17369496  0.09425293 -0.31222544  0.3660513
5  2.60902070 -0.25292334  1.48797569 -0.3295633
6 -1.84340362 -0.54876388 -0.55344517  1.2254570
> alpha = 0.05
> dataset.test.ml <- confidence.intervals.ml.test(dataset = dataset.test, input = input,
+                                                 parameters = NULL,
+                                                 ML.results = ML.results,
+                                                 alpha = alpha)
> dataset.test.lasso <- confidence.intervals.lasso.test(dataset = dataset.test,
+                                                       input = input,
+                                                       parameters = NULL,
+                                                       lasso.results = lasso.results,
+                                                       alpha = alpha)
Warning message:
In fixedLassoInf_eta(x = lasso.results$x, y = lasso.results$y, beta = lasso.results$coef.noint,  :
  p > n/2, and sd(y) = 1.000 used as an estimate of sigma; you may want to use the estimateSigma function
> dataset.test.mlm <- list(scores = dataset.test.lasso$scoresML)
> dataset.test.sch <- list(scores = dataset.test.lasso$scoresSch)
> dataset.test.lasso.an1 <- confidence.intervals.lassoan.test(dataset = dataset.test,
+                                                             input = input,
+                                                             parameters = NULL,
+                                                             lasso.results = lasso.an.results1,
+                                                             alpha = alpha)
> 
> results.test <- rbind(
+   cbind(method = "full",   dataset.test[c("age","sex")], ID = 1:4,
+         dataset.test.ml$scores[c("Dx", "Dx.ll", "Dx.ul")]),
+   cbind(method = "Lasso",dataset.test[c("age","sex")],ID = 1:4,
+         dataset.test.lasso$scores[c("Dx", "Dx.ll", "Dx.ul")]),
+   cbind(method = "reduced",  dataset.test[c("age","sex")],ID = 1:4,
+         dataset.test.mlm$scores[c("Dx", "Dx.ll", "Dx.ul")]),
+   cbind(method = "reduced-Scheffe",  dataset.test[c("age","sex")],ID = 1:4,
+         dataset.test.sch$scores[c("Dx", "Dx.ll", "Dx.ul")]),
+   cbind(method = "rLasso", dataset.test[c("age","sex")],ID = 1:4,
+         dataset.test.lasso.an1$scores[c("Dx", "Dx.ll", "Dx.ul")]))
> results.test %>%
+   mutate(method = factor(method, levels=c("full", "Lasso", "reduced", "reduced-Scheffe", "rLasso"))) -> results.test
> 
> ##### Plot PITE --------------------------------------------------------
> Cols <- c("ID", "estimate", "LowConfPt", "UpConfPt", "method")
> 
> results.test %>%
+   mutate(subject = paste0(ifelse(sex=="F", "Female, ", "Male, "),paste0("Age: ",age))) %>%
+   ggplot(aes(ymin=Dx.ll, ymax=Dx.ul, x=1, y=Dx, color=method, group = method)) +
+   geom_hline(yintercept = 0, color="gray") +
+   geom_point(aes(shape = method), size = 1, position = position_dodge(width=0.5)) +
+   geom_errorbar(width = 0.15, size = 0.20, position = position_dodge(width=0.5)) +
+   scale_color_manual(name = "Method", values = myPal) +
+   scale_shape_manual(name = "Method", values = myShape) +
+   labs(x="Subject Id", y="Estimate") +
+   scale_x_continuous(breaks=1:10) +
+   facet_wrap(~ subject, nrow = 1, strip.position = "bottom") +
+   theme_bw() +
+   theme(strip.background = element_blank(),
+         panel.grid = element_blank(),
+         strip.text   = element_text(size = 7),
+         strip.text.y = element_text(size = 7),
+         strip.text.x = element_text(size = 9),
+         legend.text  = element_text(size = 8),
+         legend.title = element_text(size = 8),
+         legend.title.align = 0.5,
+         axis.title.y = element_text(size = 7),
+         axis.title.x = element_text(size = 7),
+         axis.text    = element_text(size = 7, color = "black"),
+         # axis.text.x  = element_text(size = 7, color = "black"),
+         axis.text.x  = element_blank(),
+         axis.ticks.x  = element_blank(),
+         strip.placement = "outside") -> plot.grid
> # plot.grid
> 
> ggarrange(plot.coefficients,
+           plot.grid,
+           heights = c(5,3.5),
+           labels = c("A", "B"),
+           common.legend = TRUE, legend = "right",
+           ncol=1, nrow = 2) -> p2
Warning messages:
1: Removed 12 rows containing missing values (geom_errorbar). 
2: Removed 12 rows containing missing values (geom_point). 
3: Removed 12 rows containing missing values (geom_errorbar). 
4: Removed 12 rows containing missing values (geom_point). 
> 
> rproj <- rprojroot::find_package_root_file()
> path.figures <- paste0(rproj, "/paper/figures/")
> 
> ggsave(filename = paste0(path.figures,"Fig1.pdf"),
+        plot = p2,
+        width=17, height=12.97, units = "cm")
> ggsave(filename = paste0(path.figures,"Fig1.eps"),
+        plot = p2,
+        width=17, height=12.97, units = "cm")
> 
> proc.time()
   user  system elapsed 
 22.184   4.657  30.305 
