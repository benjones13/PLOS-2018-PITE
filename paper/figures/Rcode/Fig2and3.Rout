
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## 10 biomarkers -----
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> library(PITE)
Loading required package: broom
Loading required package: glmnet
Loading required package: Matrix
Loading required package: foreach
Loaded glmnet 2.0-13

Loading required package: MASS

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select

Loading required package: knitr
Loading required package: selectiveInference
Loading required package: intervals

Attaching package: ‘intervals’

The following object is masked from ‘package:Matrix’:

    expand

Loading required package: survival
Loading required package: R.utils
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.7.1 (2016-02-15) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.22.0 (2018-04-21) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, gc, load, save

R.utils v2.5.0 (2016-11-07) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, inherits, isOpen, parse, warnings


Attaching package: ‘PITE’

The following object is masked from ‘package:selectiveInference’:

    fixedLassoInf

> library(ggpubr)
Loading required package: magrittr

Attaching package: ‘magrittr’

The following object is masked from ‘package:R.utils’:

    extract

The following object is masked from ‘package:R.oo’:

    equals

> rm(list = ls())
> cat("\014")
> getwd()
[1] "/home/nico/MyArticles/PLOS-2017-PITE/revision/paper/figures/Rcode"
> nbiom=10
> rproj <- rprojroot::find_package_root_file()
> path.figures <- paste0(rproj, "/paper/figures/")
> 
> path <- sprintf("/sim/normal/nbiom%s/",nbiom)
> path <- paste0(rproj, path)
> # if (!dir.exists(paste0(path, "results/"))) dir.create(paste0(path, "results/"))
> # if (!dir.exists(paste0(path, "results/data/"))) dir.create(paste0(path, "results/data/"))
> if (!dir.exists(paste0(path, "results/plots/"))) dir.create(paste0(path, "results/plots/"))
> path.data <- paste0(path, "results/data/")
> path.plot <- paste0(path, "results/plots/")
> cat("Getting data from: ", path.data, "\n")
Getting data from:  /home/nico/MyArticles/PLOS-2017-PITE/revision/sim/normal/nbiom10/results/data/ 
> cat("Saving plots to: ", path.plot, "\n")
Saving plots to:  /home/nico/MyArticles/PLOS-2017-PITE/revision/sim/normal/nbiom10/results/plots/ 
> files.2 <- list.files(path=path.data)
> 
> ## PLOTS! ----------------------------------------------------------------------
> ##### Plot options --------------------------------------------------------
> myPal <- c("black","#EE4035", "#F3A530", "#56B949", "#82b6cc","#0f5e7f","#024460")
> myShape <- c(NA,16,17,15,3,12,13)
> methods <- data.frame(method = c("null","lm","lasso","mlm","sch","an1", 'an2'),
+                       Method = factor(c("ATE", "full", "Lasso","reduced", "reduced-Scheffe", "rLasso-1", "rLasso-2"),
+                                       levels=c("ATE", "full", "Lasso","reduced", "reduced-Scheffe", "rLasso-1", "rLasso-2")))
> methods
  method          Method
1   null             ATE
2     lm            full
3  lasso           Lasso
4    mlm         reduced
5    sch reduced-Scheffe
6    an1        rLasso-1
7    an2        rLasso-2
> names(myPal) <- methods$Method
> names(myShape) <- methods$Method
> colorize.fill <- scale_fill_manual(name = "Method", values = myPal)
> colorize      <- scale_color_manual(name = "Method", values = myPal)
> 
> outlier.size = -1
> 
> plotsens <- function(results, case.=4){
+   sample.size <- c(unique(results$n)*2)
+   results %>%
+     group_by(case,n, method) %>%
+     filter(case==case.) %>%
+     summarise(Sensitivity.ll = mean(sensitivity.ll, na.rm = T),
+               Sensitivity.dx = mean(sensitivity.dx, na.rm = T),
+               Sensitivity.ul = mean(sensitivity.ul, na.rm = T),
+               Specificity.ll = mean(specificity.ll, na.rm = T),
+               Specificity.dx = mean(specificity.dx, na.rm = T),
+               Specificity.ul = mean(specificity.ul, na.rm = T)) %>%
+     reshape2::melt(c("case","n","method")) %>%
+     mutate(which = factor(substr(variable,start = 13,stop = 14),
+                           levels = c("ll","dx","ul")),
+            measure = factor(substr(variable,start = 1,stop = 11),
+                             levels = c("Sensitivity", "Specificity"))) %>%
+     rename(sensitivity = value) -> datplot
+ 
+   levels(datplot$which) = c("bold(hat(B)[l])", "bold(hat(B))", "bold(hat(B)[u])")
+ 
+   if (case.==1){
+     datplot %>% filter(measure !="Sensitivity") -> datplot
+   }
+   datplot %>%
+     filter(method %in% c("ATE", "full", "Lasso", "reduced-Scheffe", "rLasso-1", "rLasso-2")) %>%
+     ggplot() +
+     geom_line(aes(y=sensitivity,  color = method, x=2*n), linetype  = 2, size=0.15) +
+     geom_point(aes(y=sensitivity,  color = method, shape=method, x=2*n), size=1) +
+     colorize.fill + colorize +
+     scale_shape_manual(name = "Method", values = myShape) +
+     scale_y_continuous(name = "", limits = c(0,1.01)) +
+     scale_x_continuous(name = "Sample Size (n)",
+                        limits = c(0,350), breaks = c(0,sample.size)) -> p1
+   p1 + facet_grid(measure ~ which, switch = "y", labeller = label_parsed) +
+     labs(color = "Method", shape = "Method", x = "Sample Size (n)") +
+     theme_bw() +
+     theme(strip.background = element_blank(),
+           panel.grid = element_blank(),
+           strip.text   = element_text(size = 7),
+           strip.text.y = element_text(size = 7),
+           strip.text.x = element_text(size = 9),
+           legend.text  = element_text(size = 8),
+           legend.title = element_text(size = 8),
+           legend.title.align = 0.5,
+           axis.title.y = element_blank(),
+           axis.title.x = element_text(size = 7),
+           axis.text    = element_text(size = 7, color = "black"),
+           axis.text.x  = element_text(size = 7, color = "black"),
+           strip.placement = "outside")
+ }
> 
> ## ----
> ## ----
> ## TEST Data ----
> 
> files.2.test <- files.2[grep(files.2, pattern = "-test")]
> results.test <- data.frame()
> for(i in files.2.test){
+   listdata2 = readRDS(paste0(path.data,i))
+   results.test <- rbind(results.test, data.frame(listdata2, scenario=i))
+ }
> 
> # results.test
> pos = do.call(rbind,gregexpr('-', results.test$scenario))
> results.test$case <- as.numeric(substr(results.test$scenario,
+                                        start = pos[,2] - 1, stop = pos[,2] - 1))
> 
> results.test$n <- as.numeric(substr(results.test$scenario,
+                                     start = pos[,2] + 10, stop = pos[,3] - 1))
> 
> results.test %>%
+   left_join(methods, by = "method") %>%
+   mutate(method = Method)-> results.test
Warning message:
Column `method` joining factors with different levels, coercing to character vector 
> 
> results.test %>% head()
           method cover         w        bias         mse   bias.true
1             ATE     1 0.5610833  0.08982205 0.008068001  0.08982205
2            full     1 1.9237937 -0.19323439 0.037339529 -0.19323439
3           Lasso     1 2.3467217  0.08285823 0.006865486  0.08285823
4         reduced     1 0.6203804  0.26610875 0.070813867  0.26610875
5 reduced-Scheffe     1 1.8680176  0.26610875 0.070813867  0.26610875
6        rLasso-1     1 1.1271786  0.26764590 0.071634329  0.26764590
     mse.true sensitivity.dx sensitivity.ll sensitivity.ul specificity.dx
1 0.008068001            NaN            NaN            NaN              0
2 0.037339529            NaN            NaN            NaN              1
3 0.006865486            NaN            NaN            NaN              0
4 0.070813867            NaN            NaN            NaN              0
5 0.070813867            NaN            NaN            NaN              0
6 0.071634329            NaN            NaN            NaN              0
  specificity.ll specificity.ul prop prop.dx prop.dx.ll prop.dx.ul          Dx
1              1              0    0       1          0          1  0.08982205
2              1              0    0       0          0          1 -0.19323439
3              1              0    0       1          0          1  0.08285823
4              1              0    0       1          0          1  0.26610875
5              1              0    0       1          0          1  0.26610875
6              1              0    0       1          0          1  0.26764590
        Dx.ll     Dx.ul PITE true sim                             scenario case
1 -0.19071958 0.3703637    0    0   1 nsim1000-case1-npergroup110-test.rds    1
2 -1.15513122 0.7686624    0    0   1 nsim1000-case1-npergroup110-test.rds    1
3 -1.80573475 0.5409870    0    0   1 nsim1000-case1-npergroup110-test.rds    1
4 -0.04408147 0.5762990    0    0   1 nsim1000-case1-npergroup110-test.rds    1
5 -0.66790003 1.2001175    0    0   1 nsim1000-case1-npergroup110-test.rds    1
6 -0.57945984 0.5477187    0    0   1 nsim1000-case1-npergroup110-test.rds    1
    n          Method
1 110             ATE
2 110            full
3 110           Lasso
4 110         reduced
5 110 reduced-Scheffe
6 110        rLasso-1
> 
> results.test %>%
+   group_by(n,case, method) %>%
+   summarize(cover = mean(cover)) %>%
+   arrange(case,n) -> results.test2
> results.test2
# A tibble: 168 x 4
# Groups:   n, case [24]
       n  case          method cover
   <dbl> <dbl>          <fctr> <dbl>
 1    20     1             ATE 0.944
 2    20     1            full 0.955
 3    20     1           Lasso 0.989
 4    20     1         reduced 0.678
 5    20     1 reduced-Scheffe 1.000
 6    20     1        rLasso-1 0.966
 7    20     1        rLasso-2 0.964
 8    50     1             ATE 0.954
 9    50     1            full 0.956
10    50     1           Lasso 0.978
# ... with 158 more rows
> 
> 
> ## Figures for publication --------
> ## Figure 2 -----------------------
> ## ***Coverage for PITE  ----------
> nsim=1000
> alpha=0.05
> p=alpha
> q=1-p
> e=1.96*sqrt(p*q/nsim)
> results.test %>%
+   group_by(n,case, method) %>%
+   summarize(coverage = mean(cover, na.rm=T)) %>%
+   arrange(case,n) -> data.coverage.pite
> head(data.coverage.pite)
# A tibble: 6 x 4
# Groups:   n, case [1]
      n  case          method coverage
  <dbl> <dbl>          <fctr>    <dbl>
1    20     1             ATE    0.944
2    20     1            full    0.955
3    20     1           Lasso    0.989
4    20     1         reduced    0.678
5    20     1 reduced-Scheffe    1.000
6    20     1        rLasso-1    0.966
> 
> data.coverage.pite %>%
+   mutate(N = 2*n) %>%
+   filter(case %in% c(1)) %>%
+   ggplot() +
+   geom_line(aes(x = N, y=coverage, color=method,  group=method), linetype = 2, size=0.15) +
+   geom_point(aes(x = N, y=coverage, color=method, shape = method, #fill = method,
+                  group=method), size = 1) +
+   geom_hline(yintercept=1-alpha+e, linetype=3, size=0.1) +
+   geom_hline(yintercept=1-alpha, size=0.1) +
+   geom_hline(yintercept=1-alpha-e, linetype=3, size=0.1) +
+   scale_x_continuous(breaks = c(0,40,100,220,350), limits = c(0,350)) +
+   scale_y_continuous(limits = c(0.65,1)) +
+   scale_color_manual(name = "Method", values = myPal) +
+   scale_shape_manual(name = "Method", values = myShape) +
+   guides(shape = guide_legend(title = "Method")) +
+   labs(y="Coverage", x= "Sample size (n)") +
+   theme_bw()  +
+   theme(strip.background = element_blank(),
+         panel.grid = element_blank(),
+         title = element_text(size = 7),
+         strip.text   = element_text(size = 7),
+         strip.text.y = element_text(size = 7),
+         strip.text.x = element_text(size = 7),
+         legend.text  = element_text(size = 7),
+         legend.title = element_text(size = 7),
+         legend.title.align = 0.5,
+         axis.title.y = element_text(size = 7),
+         axis.title.x = element_text(size = 7),
+         legend.position = "none",
+         legend.key.height=unit(0.5,"line"),
+         legend.background = element_rect(fill = "transparent", colour = "transparent"),
+         axis.text    = element_text(size = 6, color = "black"),
+         axis.text.x  = element_text(size = 6, color = "black"),
+         strip.placement = "outside") -> pite_cover1
> # pite_cover1
> 
> data.coverage.pite %>%
+   mutate(N = 2*n) %>%
+   filter(case %in% c(4)) %>%
+   ggplot() +
+   geom_line(aes(x = N, y=coverage, color=method,  group=method), linetype = 2, size=0.15) +
+   geom_point(aes(x = N, y=coverage, color=method, shape = method, #fill = method,
+                  group=method), size = 1) +
+   geom_hline(yintercept=1-alpha+e, linetype=3, size=0.1) +
+   geom_hline(yintercept=1-alpha, size=0.1) +
+   geom_hline(yintercept=1-alpha-e, linetype=3, size=0.1) +
+   scale_x_continuous(breaks = c(0,40,100,220,350), limits = c(0,350)) +
+   scale_y_continuous(limits = c(0.65,1)) +
+   scale_color_manual(name = "Method", values = myPal) +
+   scale_shape_manual(name = "Method", values = myShape) +
+   guides(shape = guide_legend(title = "Method")) +
+   labs(y="Coverage", x= "Sample size (n)") +
+   theme_bw()  +
+   theme(strip.background = element_blank(),
+         panel.grid = element_blank(),
+         title = element_text(size = 7),
+         strip.text   = element_text(size = 7),
+         strip.text.y = element_text(size = 7),
+         strip.text.x = element_text(size = 7),
+         legend.text  = element_text(size = 7),
+         legend.title = element_text(size = 7),
+         legend.title.align = 0.5,
+         axis.title.y = element_text(size = 7),
+         axis.title.x = element_text(size = 7),
+         legend.position = c(0.81, 0.20),
+         legend.key.height=unit(0.5,"line"),
+         legend.background = element_rect(fill = "transparent", colour = "transparent"),
+         axis.text    = element_text(size = 6, color = "black"),
+         axis.text.x  = element_text(size = 6, color = "black"),
+         strip.placement = "outside") -> pite_cover4
> # pite_cover4
> 
> ggarrange(pite_cover1,
+           pite_cover4,
+           heights = c(1,1),
+           labels = c("A", "B"),
+           ncol=2, nrow = 1) -> plot2
Warning messages:
1: Removed 4 rows containing missing values (geom_point). 
2: Removed 4 rows containing missing values (geom_point). 
> img.width  = 3.14
> img.height = 3.14
> 
> ggsave(paste0(path.figures,"Fig2.pdf"),plot = plot2,
+        width = 2*img.width, height = img.height, units = "in")
> ggsave(paste0(path.figures,"Fig2.eps"),plot = plot2,
+        width = 2*img.width, height = img.height, units = "in")
> 
> 
> ## Figure 3  --------------------------
> ###***Sensitivity and specificity -----
> plotsens(results.test, case. = 1) -> plotA
> plotsens(results.test, case. = 4) -> plotB
> ggarrange(plotA,
+           plotB,
+           heights = c(5,8),
+           labels = c("A", "B"),
+           common.legend = TRUE, legend = "right",
+           ncol=1, nrow = 2) -> plot3
Warning messages:
1: Removed 12 rows containing missing values (geom_point). 
2: Removed 12 rows containing missing values (geom_point). 
3: Removed 24 rows containing missing values (geom_point). 
> ggsave(paste0(path.figures,"Fig3.pdf"), plot = plot3, width = 17, height = 15, units = "cm")
> ggsave(paste0(path.figures,"Fig3.eps"), plot = plot3, width = 17, height = 15, units = "cm")
> 
> 
> proc.time()
   user  system elapsed 
 11.741   0.280  12.832 
